// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Wenrh2004/sandbox/internal/task/infrastructure/model"
)

func newSubmitInfo(db *gorm.DB, opts ...gen.DOOption) submitInfo {
	_submitInfo := submitInfo{}

	_submitInfo.submitInfoDo.UseDB(db, opts...)
	_submitInfo.submitInfoDo.UseModel(&model.SubmitInfo{})

	tableName := _submitInfo.submitInfoDo.TableName()
	_submitInfo.ALL = field.NewAsterisk(tableName)
	_submitInfo.ID = field.NewInt32(tableName, "id")
	_submitInfo.SubmitID = field.NewString(tableName, "submit_id")
	_submitInfo.TaskID = field.NewString(tableName, "task_id")
	_submitInfo.AppID = field.NewUint64(tableName, "app_id")
	_submitInfo.Language = field.NewString(tableName, "language")
	_submitInfo.Code = field.NewString(tableName, "code")
	_submitInfo.CreatedAt = field.NewTime(tableName, "created_at")

	_submitInfo.fillFieldMap()

	return _submitInfo
}

// submitInfo 提交信息
type submitInfo struct {
	submitInfoDo

	ALL       field.Asterisk
	ID        field.Int32  // 提交记录唯一ID
	SubmitID  field.String // 提交ID
	TaskID    field.String // 任务ID
	AppID     field.Uint64 // 创建人
	Language  field.String // 提交语言
	Code      field.String // 代码
	CreatedAt field.Time   // 提交时间

	fieldMap map[string]field.Expr
}

func (s submitInfo) Table(newTableName string) *submitInfo {
	s.submitInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s submitInfo) As(alias string) *submitInfo {
	s.submitInfoDo.DO = *(s.submitInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *submitInfo) updateTableName(table string) *submitInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.SubmitID = field.NewString(table, "submit_id")
	s.TaskID = field.NewString(table, "task_id")
	s.AppID = field.NewUint64(table, "app_id")
	s.Language = field.NewString(table, "language")
	s.Code = field.NewString(table, "code")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *submitInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *submitInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["submit_id"] = s.SubmitID
	s.fieldMap["task_id"] = s.TaskID
	s.fieldMap["app_id"] = s.AppID
	s.fieldMap["language"] = s.Language
	s.fieldMap["code"] = s.Code
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s submitInfo) clone(db *gorm.DB) submitInfo {
	s.submitInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s submitInfo) replaceDB(db *gorm.DB) submitInfo {
	s.submitInfoDo.ReplaceDB(db)
	return s
}

type submitInfoDo struct{ gen.DO }

type ISubmitInfoDo interface {
	gen.SubQuery
	Debug() ISubmitInfoDo
	WithContext(ctx context.Context) ISubmitInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubmitInfoDo
	WriteDB() ISubmitInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubmitInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubmitInfoDo
	Not(conds ...gen.Condition) ISubmitInfoDo
	Or(conds ...gen.Condition) ISubmitInfoDo
	Select(conds ...field.Expr) ISubmitInfoDo
	Where(conds ...gen.Condition) ISubmitInfoDo
	Order(conds ...field.Expr) ISubmitInfoDo
	Distinct(cols ...field.Expr) ISubmitInfoDo
	Omit(cols ...field.Expr) ISubmitInfoDo
	Join(table schema.Tabler, on ...field.Expr) ISubmitInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubmitInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubmitInfoDo
	Group(cols ...field.Expr) ISubmitInfoDo
	Having(conds ...gen.Condition) ISubmitInfoDo
	Limit(limit int) ISubmitInfoDo
	Offset(offset int) ISubmitInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubmitInfoDo
	Unscoped() ISubmitInfoDo
	Create(values ...*model.SubmitInfo) error
	CreateInBatches(values []*model.SubmitInfo, batchSize int) error
	Save(values ...*model.SubmitInfo) error
	First() (*model.SubmitInfo, error)
	Take() (*model.SubmitInfo, error)
	Last() (*model.SubmitInfo, error)
	Find() ([]*model.SubmitInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SubmitInfo, err error)
	FindInBatches(result *[]*model.SubmitInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SubmitInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubmitInfoDo
	Assign(attrs ...field.AssignExpr) ISubmitInfoDo
	Joins(fields ...field.RelationField) ISubmitInfoDo
	Preload(fields ...field.RelationField) ISubmitInfoDo
	FirstOrInit() (*model.SubmitInfo, error)
	FirstOrCreate() (*model.SubmitInfo, error)
	FindByPage(offset int, limit int) (result []*model.SubmitInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubmitInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s submitInfoDo) Debug() ISubmitInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s submitInfoDo) WithContext(ctx context.Context) ISubmitInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s submitInfoDo) ReadDB() ISubmitInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s submitInfoDo) WriteDB() ISubmitInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s submitInfoDo) Session(config *gorm.Session) ISubmitInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s submitInfoDo) Clauses(conds ...clause.Expression) ISubmitInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s submitInfoDo) Returning(value interface{}, columns ...string) ISubmitInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s submitInfoDo) Not(conds ...gen.Condition) ISubmitInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s submitInfoDo) Or(conds ...gen.Condition) ISubmitInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s submitInfoDo) Select(conds ...field.Expr) ISubmitInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s submitInfoDo) Where(conds ...gen.Condition) ISubmitInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s submitInfoDo) Order(conds ...field.Expr) ISubmitInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s submitInfoDo) Distinct(cols ...field.Expr) ISubmitInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s submitInfoDo) Omit(cols ...field.Expr) ISubmitInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s submitInfoDo) Join(table schema.Tabler, on ...field.Expr) ISubmitInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s submitInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubmitInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s submitInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubmitInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s submitInfoDo) Group(cols ...field.Expr) ISubmitInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s submitInfoDo) Having(conds ...gen.Condition) ISubmitInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s submitInfoDo) Limit(limit int) ISubmitInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s submitInfoDo) Offset(offset int) ISubmitInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s submitInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubmitInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s submitInfoDo) Unscoped() ISubmitInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s submitInfoDo) Create(values ...*model.SubmitInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s submitInfoDo) CreateInBatches(values []*model.SubmitInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s submitInfoDo) Save(values ...*model.SubmitInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s submitInfoDo) First() (*model.SubmitInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubmitInfo), nil
	}
}

func (s submitInfoDo) Take() (*model.SubmitInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubmitInfo), nil
	}
}

func (s submitInfoDo) Last() (*model.SubmitInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubmitInfo), nil
	}
}

func (s submitInfoDo) Find() ([]*model.SubmitInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.SubmitInfo), err
}

func (s submitInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SubmitInfo, err error) {
	buf := make([]*model.SubmitInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s submitInfoDo) FindInBatches(result *[]*model.SubmitInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s submitInfoDo) Attrs(attrs ...field.AssignExpr) ISubmitInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s submitInfoDo) Assign(attrs ...field.AssignExpr) ISubmitInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s submitInfoDo) Joins(fields ...field.RelationField) ISubmitInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s submitInfoDo) Preload(fields ...field.RelationField) ISubmitInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s submitInfoDo) FirstOrInit() (*model.SubmitInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubmitInfo), nil
	}
}

func (s submitInfoDo) FirstOrCreate() (*model.SubmitInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SubmitInfo), nil
	}
}

func (s submitInfoDo) FindByPage(offset int, limit int) (result []*model.SubmitInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s submitInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s submitInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s submitInfoDo) Delete(models ...*model.SubmitInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *submitInfoDo) withDO(do gen.Dao) *submitInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
