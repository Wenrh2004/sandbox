// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/Wenrh2004/sandbox/internal/adapter/handler"
	"github.com/Wenrh2004/sandbox/internal/application"
	"github.com/Wenrh2004/sandbox/internal/domain/service"
	"github.com/Wenrh2004/sandbox/internal/infrastructure/runner"
	"github.com/Wenrh2004/sandbox/pkg/adapter"
	"github.com/Wenrh2004/sandbox/pkg/application/app"
	"github.com/Wenrh2004/sandbox/pkg/application/server/http"
	"github.com/Wenrh2004/sandbox/pkg/log"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	adapterService := adapter.NewService(logger)
	client := runner.NewClient()
	containerPool, err := runner.GetContainerPool(viperViper, client)
	if err != nil {
		return nil, nil, err
	}
	codeRunner := runner.NewCodeRunner(containerPool, client)
	taskDomainService := service.NewTaskService(viperViper, codeRunner)
	taskHandler := handler.NewTaskHandler(adapterService, taskDomainService)
	server := application.NewTaskApplication(viperViper, logger, taskHandler)
	appApp := newApp(server, viperViper)
	return appApp, func() {
	}, nil
}

// wire.go:

var infrastructureSet = wire.NewSet(runner.NewClient, runner.GetContainerPool, runner.NewCodeRunner)

var domainSet = wire.NewSet(service.NewTaskService)

var adapterSet = wire.NewSet(adapter.NewService, handler.NewTaskHandler)

var applicationSet = wire.NewSet(application.NewTaskApplication)

// build App
func newApp(
	httpServer *http.Server,

	conf *viper.Viper,

) *app.App {
	return app.NewApp(app.WithServer(httpServer), app.WithName(conf.GetString("app.name")))
}
